
Regex
* public
* Several protected fields and methods (but we don't derive from it)
* Is an executable regular expression: also utility static methods
* Holds static RegexCache (of Regexes)
* Constructor 
    * sets RegexCode using RegexParser and RegexWriter
    * if RegexOptions.Compiled, compiles and holds a RegexRunnerFactory and clears RegexCode
* Run
    * Uses held RegexRunner if any; if none/in use, creates another with held RegexRunnerFactory; if none, interprets with held RegexCode
* Accepts:

    RegexOptions
    * public

    MatchEvaluator
    * public

    RegexCompilationInfo
    * public
    * Parameters to use for regex compilation
    * Passed in by app to Regex.CompileToAssembly(..)

=========================== parsing =====================

RegexParser
* `RegexTree Parse(string pattern, RegexOptions options...) {}`
* Also has Escape/Unescape methods, and parses into RegexReplacements
* Converts pattern to RegexTree of RegexNodes
* Optimizations occur on every RegexNode.AddChild() (Reduce())
* Final call to RegexNode.FinalOptimize()

    RegexReplacement
    * Parsed replacement pattern
    * Created by RegexParser, used in Regex.Replace/Match.Result(..)

    RegexCharClass
    * Representation of single, range, or class as packed string
    * Created by RegexParser
    * String is held on RegexNode

    RegexNode
    * Created by RegexParser
    * Node in regex parse tree
    * Some nodes represent subsequent optimizations
    * Holds Children and Next (TODOdump)
    * Holds char (or?) string (which may be char class), and M and N constants (eg loop bounds)
    * Type int indicates interpretation

    RegexTree
    * Created by RegexParser
    * Simple holder for root RegexNode, options, and captures datastructure

RegexWriter
* Invoked by Regex
* Creates itself `RegexCode Write(RegexTree tree){}`
* Converts RegexTree to RegexCode

    RegexFCD (uses RegexFC)
    * Deals with static pattern prefixes (FC=first chars)
    * Created by RegexWriter
    * Creates RegexFCs
    * .FirstChars() creates RegexPrefix from RegexTree

    RegexPrefix
    * Literal string that match must begin with

    RegexBoyerMoore
    * BoyerMoore table
    * Constructed by RegexWriter
    * Singleton held on RegexCode
    * RegexInterpreter uses it to perform BoyerMoore
    * RegexCompiler generates code for BoyerMoore but uses its tables

RegexCode
* Created by RegexWriter

=============== compilation (skipped for interpreted) =================

RegexCompiler
* public abstract
    * protected void GenerateFindFirstChar()
    * protected void GenerateGo()
* Compiles RegexCode to RegexRunnerFactory
    * Creates and uses RegexLWCGCompiler
* Implements CompileToAssembly
    * Creates and uses RegexAssemblyCompiler
    * Uses RegexParser and RegexWriter directly
* Created and used only from `RegexRunnerFactory Regex.Compile(RegexCode code, RegexOptions options...)`
* Implements `RegexRunnerFactory RegexCompiler.Compile(RegexCode code, RegexOptions options...)`

    RegexLWCGCompiler -> RegexCompiler
    * Creates CompiledRegexRunnerFactory

        RegexRunnerFactory
        * public abstract
        * Makes RegexRunners with `RegexRunner CreateInstance()`
        * Not relevant to interpreted mode

        CompiledRegexRunnerFactory -> RegexRunnerFactory
        * Created by RegexLWCGCompiler
        * Creates CompiledRegexRunner

    RegexAssemblyCompiler
    * Created and used by `RegexCompiler.CompileToAssembly(...)`

============== execution ======================

RegexRunner
* public abstract but heavily implemented
    * Lots of protected members: tracking position, execution stacks, and captures
    * `protected abstract void Go()`
    * `protected abstract bool FindFirstChar()`
    * `public Match? Scan(System.Text.RegularExpressions.Regex regex, string text...)` calls FindFirstChar() and Go()
* Has a "quick" mode for true/false matches
* Concrete instances created only by `Match? Regex.Run(...)`
    * calling either `RegexRunner CompiledRegexRunnerFactory.CreateInstance()` or newing up RegexInterpreter

    RegexInterpreter -> RegexRunner
    CompiledRegexRunner ->  RegexRunner


=============== results ==================
Match -> Group
* Holds a Regex in order to call NextMatch()
* Created by RegexRunner

Group -> Capture
Capture
* Group and Capture are simple holders

MatchCollection
GroupCollection
* Creates Groups

CaptureCollection
* Create Captures

RegexParseException
* Contains RegexParseError

RegexMatchTimeoutException
* public

MatchSparse -> Match
* Optimization detail

========dumping============
RegexTree and RegexNode can dump themselves
Match can dump
Interpreter can dump state
RegexWriter can dump both input RegexTree and output RegexCode
RegexBoyerMoore can dump itself